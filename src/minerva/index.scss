@use 'sass:map';
@use 'sass:list';

// Minerva 1.2.2

$color-primary: (
  '50': #FCE4E9,
  '100': #F8C2CD,
  '200': #E87C90,
  '300': #E5425E,
  '400': #BE3047,
  '500': #9e1b32,
  '600': #821E2E,
  '700': #70202C,
  '800': #58232A,
  '900': #421A20,
);
$color-neutral: (
  '50': #f2f3f4,
  '100': #dfe2e5,
  '200': #c6cbd0,
  '300': #ACB2BA,
  '400': #9097A0,
  '500': #757c88,
  '600': #5f646d,
  '700': #4a4c54,
  '800': #35363b,
  '900': #212124,
);
$color-info: (
  '50': #E8F2FC,
  '100': #CEE4F9,
  '200': #93C4F4,
  '300': #60AAF2,
  '400': #258BEF,
  '500': #0070DD,
  '600': #0058AC,
  '700': #003E78,
  '800': #012A4C,
  '900': #021B30,
);
$color-positive: (
  '50': #f0f5ef,
  '100': #CDE9D3,
  '200': #AADDB7,
  '300': #87D09C,
  '400': #64C480,
  '500': #39A845,
  '600': #308B3A,
  '700': #23672B,
  '800': #194B1F,
  '900': #103514,
);
$color-negative: (
  '50': #FAF4E6,
  '100': #F9E9C1,
  '200': #F7D090,
  '300': #F4B959,
  '400': #ECA024,
  '500': #DC8E0E,
  '600': #C47511,
  '700': #9C5506,
  '800': #723900,
  '900': #452000,
);

// stylelint-disable declaration-empty-line-before
// stylelint-disable scss/dollar-variable-empty-line-before
// stylelint-disable scss/at-if-closing-brace-newline-after
// stylelint-disable scss/at-else-empty-line-before
// stylelint-disable scss/at-else-closing-brace-newline-after

@function get-var($namespace, $map, $key, $format: 'default') {
  $name: '--ua_#{$namespace}--#{$key}';
  @if map.has-key($map, $key) {
    $value: map.get($map, $key);
    @if $format == 'value' { @return $value; }
    @if $format == 'name' { @return $name; }
    @return 'var(#{$name}, #{$value})';
  } @else {
    @error '#{$key} is not a valid #{$namespace} token.';
  }
}

// =================================================================
// SECTION Spacing
// =================================================================

$space-medium: (
  '05': 0.25rem,
  '1': 0.5rem,
  '2': 1rem,
  '4': 2rem,
  '8': 4rem,
  '16': 8rem,
);

$space: (
  '05': 0.25rem,
  '1': 0.5rem,
  '2': 1rem,
  '4': 2rem,
  '8': 4rem,
  '16': 8rem,
);

$semantic-space: (
  'block-padding': map.get($space, '4'),
  'inline-padding': 0.1em 0.3em,
  'inline-block-padding': 0.25em 0.75em,
  'flow': map.get($space, '4'),
  'flow-half': map.get($space, '2'),
  'flow-double': map.get($space, '8'),
  'section': map.get($space, '8'),
  'gutter': map.get($space, '2'),
  'gap': map.get($space, '4'),
);

@function space($key, $format: 'default') {
  @if map.has-key($space, $key) {
    @return get-var('space', $space, $key, $format);
  } @else {
    @return get-var('space', $semantic-space, $key, $format);
  }
}

@mixin spacing {
  :root {
    @each $key, $value in $space {
      #{space($key, 'name')}: #{space($key, 'value')};
    }
    @each $key, $value in $semantic-space {
      #{space($key, 'name')}: #{space($key, 'value')};
    }
  }

  @include media('content') {
    :root {
      --ua_space--section: #{space('16')};
    }
  }
}

// !SECTION Spacing
// =================================================================
// SECTION Layout
// =================================================================

$layout-widths: (
  'content': 56rem + (map.get($semantic-space, 'gutter') * 2),
  'sidebar': 16rem + (map.get($semantic-space, 'gutter') * 2),
  'wide': 56rem + 16rem + (map.get($semantic-space, 'gutter') * 4) + map.get($semantic-space, 'gap'),
);

@function layout-width($key, $format: 'default') {
  @return get-var('layout-width', $layout-widths, $key, $format);
}

@mixin layout-widths {
  :root {
    @each $key, $value in $layout-widths {
      #{layout-width($key, 'name')}: #{layout-width($key, 'value')};
    }
  }
}

// !SECTION Layout
// =================================================================
// SECTION Media Queries
// =================================================================

$media-criteria: (
  'landscape': 'orientation: landscape',
  'portrait': 'orientation: portrait',
  'wide': "min-width: #{map.get($layout-widths, 'wide')}",
  'content': "min-width: #{map.get($layout-widths, 'content')}",
  'sidebar': "min-width: #{map.get($layout-widths, 'sidebar')}",
  'touch': 'pointer: coarse',
  'reduce-motion': 'prefers-reduced-motion: no-preference',
);

@mixin media($criteria) {
  @if map.has-key($media-criteria, $criteria) {
    @media (#{map.get($media-criteria, $criteria)}) {
      @content;
    }
  } @else {
    @error '#{$criteria} is not a valid media criteria. Refer to keys of the $media-criteria map for valid values';
  }
}

// !SECTION Media Queries
// =================================================================
// SECTION Colors
// =================================================================

$colors-default: (
  'text': (
    'default': map.get($color-neutral, '800'),
    'subtle': map.get($color-neutral, '500'),
    'inverse': white,
    'accent': map.get($color-primary, '500'),
    'link': map.get($color-primary, '500'),
    'link-hover': map.get($color-primary, '600'),
    'positive': map.get($color-positive, '800'),
    'negative': map.get($color-negative, '800'),
    'info': map.get($color-info, '800'),
  ),
  'background': (
    'surface': white,
    'element': map.get($color-neutral, '50'),
    'chip': map.get($color-neutral, '100'),
    'disabled': map.get($color-neutral, '200'),
    'info': map.get($color-info, '50'),
    'negative': map.get($color-negative, '50'),
    'positive': map.get($color-positive, '50'),
  ),
  'accent': (
    'neutral': map.get($color-neutral, '500'),
    'primary': map.get($color-primary, '500'),
    'info': map.get($color-info, '500'),
    'negative': map.get($color-negative, '500'),
    'positive': map.get($color-positive, '500'),
  ),
  'icon': (
    'primary': map.get($color-primary, '500'),
    'secondary': map.get($color-primary, '300'),
  )
);
$colors-elevated: (
  'text': (
    'default': map.get($color-neutral, '800'),
    'subtle': map.get($color-neutral, '600'),
    'inverse': white,
    'accent': map.get($color-primary, '500'),
    'link': map.get($color-primary, '500'),
    'link-hover': map.get($color-primary, '600'),
    'positive': map.get($color-positive, '800'),
    'negative': map.get($color-negative, '800'),
    'info': map.get($color-info, '800'),
  ),
  'background': (
    'surface': map.get($color-neutral, '50'),
    'element': map.get($color-neutral, '100'),
    'chip': map.get($color-neutral, '200'),
    'disabled': map.get($color-neutral, '300'),
    'info': map.get($color-info, '50'),
    'negative': map.get($color-negative, '50'),
    'positive': map.get($color-positive, '50'),
  ),
  'accent': (
    'neutral': map.get($color-neutral, '500'),
    'primary': map.get($color-primary, '500'),
    'info': map.get($color-info, '500'),
    'negative': map.get($color-negative, '500'),
    'positive': map.get($color-positive, '500'),
  ),
  'icon': (
    'primary': map.get($color-primary, '500'),
    'secondary': map.get($color-primary, '300'),
  )
);
$colors-prominent: (
  'text': (
    'default': white,
    'subtle': map.get($color-neutral, '400'),
    'inverse': map.get($color-neutral, '800'),
    'accent': map.get($color-primary, '300'),
    'link': white,
    'link-hover': map.get($color-neutral, '50'),
    'positive': map.get($color-positive, '50'),
    'negative': map.get($color-negative, '50'),
    'info': map.get($color-info, '50'),
  ),
  'background': (
    'surface': map.get($color-neutral, '800'),
    'element': map.get($color-neutral, '900'),
    'chip': map.get($color-neutral, '700'),
    'disabled': map.get($color-neutral, '600'),
    'info': map.get($color-info, '700'),
    'negative': map.get($color-negative, '700'),
    'positive': map.get($color-positive, '700'),
  ),
  'accent': (
    'neutral': map.get($color-neutral, '500'),
    'primary': map.get($color-primary, '500'),
    'info': map.get($color-info, '500'),
    'negative': map.get($color-negative, '500'),
    'positive': map.get($color-positive, '500'),
  ),
  'icon': (
    'primary': map.get($color-primary, '300'),
    'secondary': white,
  )
);

@function color($group, $key, $format: 'default') {
  @if map.has-key($colors-default, $group) {
    @return get-var('color-#{$group}', map.get($colors-default, $group), $key, $format);
  } @else {
    @error '"#{$group}" is not a valid color group. Refer to keys of the $colors map for valid values';
  }
}

@mixin colors {
  :root {
    @each $group, $colors in $colors-default {
      @each $key, $value in $colors {
        #{color($group, $key, 'name')}: #{$value};
      }
    }
  }

  .ua_minerva .ua_contrast--more {
    @each $group, $colors in $colors-elevated {
      @each $key, $value in $colors {
        #{color($group, $key, 'name')}: #{$value};
      }
    }

    color: #{color('text', 'default')};
    background-color: #{color('background', 'surface')};
  }

  .ua_minerva .ua_contrast--most {
    @each $group, $colors in $colors-prominent {
      @each $key, $value in $colors {
        #{color($group, $key, 'name')}: #{$value};
      }
    }

    color: #{color('text', 'default')};
    background-color: #{color('background', 'surface')};
  }
}

// !SECTION Colors
// =================================================================
// SECTION Borders
// =================================================================

// stylelint-disable unit-disallowed-list -- borders are allowed to use px
$borders: (
  'standard': 1px solid #{color('background', 'chip')},
  'divider': 2px solid #{color('background', 'chip')},
  'accent': 5px solid #{color('accent', 'neutral')},
  'outline': 1px solid #{color('accent', 'neutral')},
);
// stylelint-enable unit-disallowed-list

@function border($key, $format: 'default') {
  @return get-var('border', $borders, $key, $format);
}

@mixin borders {
  :root {
    @each $key, $value in $borders {
      #{border($key, 'name')}: #{border($key, 'value')};
    }
  }
}

// !SECTION Borders
// =================================================================
// SECTION Typography
// =================================================================
// ==============================
// SECTION Fonts
// ==============================

$fonts: (
  'heading': 'proxima-nova, sans-serif',
  'body': 'proxima-nova, sans-serif',
  'accent': 'proxima-nova-condensed, sans-serif',
  'mono': 'monospace',
  'icon': '"Font Awesome 6 Pro"',
  'icon-brands': '"Font Awesome 6 Brands"',
  'icon-duo': '"Font Awesome 6 Duotone"'
);

@function font($key, $format: 'default') {
  @return get-var('font', $fonts, $key, $format);
}

@mixin font-family($key, $important: false) {
  $i: '' !default;
  @if $important == true { $i: '!important'; }
  font-family: #{font($key)} #{$i};
}

@mixin fonts {
  :root {
    @each $key, $value in $fonts {
      #{font($key, 'name')}: #{$value};
    }
  }
}

// !SECTION Fonts
// ==============================
// SECTION Weights
// ==============================

$weights: (
  'regular': 400,
  'semibold': 600,
  'bold': 700,
  'black': 900,
);

@function weight($key, $format: 'default') {
  @return get-var('weight', $weights, $key, $format);
}

@mixin font-weight($key, $important: false) {
  $i: '' !default;
  @if $important == true { $i: '!important'; }
  font-weight: #{weight($key)} #{$i};
}

@mixin weights {
  :root {
    @each $key, $value in $weights {
      #{weight($key, 'name')}: #{$value};
    }
  }
}

// !SECTION Weights
// ==============================
// SECTION Font Sizes
// ==============================

$font-sizes: (
  'default': (
    'xsmall': 0.75rem,
    'small': 1rem,
    'normal': 1.25rem,
    'medium': 1.5rem,
    'large': 1.75rem,
    'xlarge': 2rem,
    'xxlarge': 2.25rem
  ),
  'medium': (
    'large': 2rem,
    'xlarge': 2.5rem,
    'xxlarge': 3rem
  ),
  'large': (
    'large': 2.25rem,
    'xlarge': 3rem,
    'xxlarge': 4.5rem
  )
);

@function font-size($key, $format: 'default') {
  @return get-var('font-size', map.get($font-sizes, 'default'), $key, $format);
}

@mixin font-size($key, $important: false) {
  $i: '' !default;
  @if $important == true { $i: '!important'; }
  font-size: #{font-size($key)} #{$i};
}

@mixin font-sizes {
  :root {
    @each $key, $value in map.get($font-sizes, 'default') {
      #{font-size($key, 'name')}: #{$value};
    }
  }

  @media (min-width: 500px) {
    :root {
      @each $key, $value in map.get($font-sizes, 'medium') {
        #{font-size($key, 'name')}: #{$value};
      }
    }
  }

  @include media('wide') {
    :root {
      @each $key, $value in map.get($font-sizes, 'large') {
        #{font-size($key, 'name')}: #{$value};
      }
    }
  }
}

// !SECTION Font Sizes
// ==============================
// SECTION Line Heights
// ==============================

$line-heights: (
  'default': (
    'xsmall': 1rem,
    'small': 1.5rem,
    'normal': 2rem,
    'medium': 2rem,
    'large': 2.25rem,
    'xlarge': 2.5rem,
    'xxlarge': 2.5rem
  ),
  'medium': (
    'large': 2.5rem,
    'xlarge': 3rem,
    'xxlarge': 3rem
  ),
  'large': (
    'large': 2.75rem,
    'xlarge': 3.5rem,
    'xxlarge': 4.5rem
  )
);

@function line-height($key, $format: 'default') {
  @return get-var('line-height', map.get($line-heights, 'default'), $key, $format);
}

@mixin line-height($key, $important: false) {
  $i: '' !default;
  @if $important == true { $i: '!important'; }
  line-height: #{line-height($key)} #{$i};
}

@mixin line-heights {
  :root {
    @each $key, $value in map.get($line-heights, 'default') {
      #{line-height($key, 'name')}: #{$value};
    }
  }

  @media (min-width: 500px) {
    :root {
      @each $key, $value in map.get($line-heights, 'medium') {
        #{line-height($key, 'name')}: #{$value};
      }
    }
  }

  @include media('wide') {
    :root {
      @each $key, $value in map.get($line-heights, 'large') {
        #{line-height($key, 'name')}: #{$value};
      }
    }
  }
}

// !SECTION Line Heights

@mixin uppercase {
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

@mixin typeset($style, $important: false, $spacing: true) {

  $i: '' !default;
  @if $important == true { $i: '!important'; }

  @if $style == 'xxlarge' {
    @include font-size('xxlarge', $important);
    @include line-height('xxlarge', $important);
    @if $spacing {
      letter-spacing: -0.03em #{$i};
    }
  } @else if $style == 'xlarge' {
    @include font-size('xlarge', $important);
    @include line-height('xlarge', $important);
    @if $spacing {
      letter-spacing: -0.025em #{$i};
    }
  } @else if $style == 'large' {
    @include font-size('large', $important);
    @include line-height('large', $important);
    @if $spacing {
      letter-spacing: -0.01em #{$i};
    }
  } @else if $style == 'medium' or $style == 'normal' or $style == 'small' or $style == 'xsmall' {
    @include font-size($style, $important);
    @include line-height($style, $important);
  } @else if $style == 'ui' {
    @include font-size('normal', $important);
    @include line-height('small', $important);
  } @else {
    @error '#{$style} is not a valid typeset style. Refer to the typeset mixin for valid styles.';
  }
}

// !SECTION Typography
